import React, { ReactNode } from 'react';
import { validatePROVJSONSchema } from '../lib/ajv';
import queries from './queries';

export type RelationName = 'wasGeneratedBy'
  | 'used'
  | 'wasInformedBy'
  | 'wasStartedBy'
  | 'wasEndedBy'
  | 'wasInvalidatedBy'
  | 'wasDerivedFrom'
  | 'wasAttributedTo'
  | 'wasAssociatedWith'
  | 'actedOnBehalfOf'
  | 'wasInfluencedBy'
  | 'specializationOf'
  | 'alternateOf'
  | 'hadMember'

export const RELATION_NAMES: RelationName[] = [
  'wasGeneratedBy',
  'used',
  'wasInformedBy',
  'wasStartedBy',
  'wasEndedBy',
  'wasInvalidatedBy',
  'wasDerivedFrom',
  'wasAttributedTo',
  'wasAssociatedWith',
  'actedOnBehalfOf',
  'wasInfluencedBy',
  'specializationOf',
  'alternateOf',
  'hadMember',
];

export type Relation = {
  name: RelationName;
  documentation: ReactNode;
  url: string;
  domain: NodeVariant;
  domainKey: string;
  range: NodeVariant;
  rangeKey: string;
  timestamp?: boolean;
}

export const RELATIONS: Relation[] = [
  {
    name: 'wasGeneratedBy',
    documentation: (
      <>
        <strong><i>Generation</i></strong>
        {' is the completion of production of a new entity by an activity. This entity did not exist before generation and becomes available for usage after this generation.'}
      </>
    ),
    url: 'https://www.w3.org/ns/prov#wasGeneratedBy',
    domain: 'entity',
    domainKey: 'prov:entity',
    range: 'activity',
    rangeKey: 'prov:activity',
  },
  {
    name: 'used',
    documentation: (
      <>
        <strong><i>Usage</i></strong>
        {' is the beginning of utilizing an entity by an activity. Before usage, the activity had not begun to utilize this entity and could not have been affected by the entity.'}
      </>
    ),
    url: 'https://www.w3.org/ns/prov#used',
    domain: 'activity',
    domainKey: 'prov:activity',
    range: 'entity',
    rangeKey: 'prov:entity',
  },
  {
    name: 'wasInformedBy',
    documentation: (
      <>
        <strong><i>Communication</i></strong>
        {' is the exchange of some unspecified entity by two activities, one activity using some entity generated by the other.'}
      </>
    ),
    url: 'https://www.w3.org/ns/prov#wasInformedBy',
    domain: 'activity',
    domainKey: 'prov:informed',
    range: 'activity',
    rangeKey: 'prov:informant',
  },
  {
    name: 'wasStartedBy',
    documentation: (
      <>
        <strong><i>Start</i></strong>
        {' is when an activity is deemed to have been started by an entity, known as '}
        <strong><i>trigger</i></strong>
        {'. The activity did not exist before its start. Any usage, generation, or invalidation involving an activity follows the activity\'s start. A start may refer to a trigger entity that set off the activity, or to an activity, known as '}
        <strong><i>starter</i></strong>
        , that generated the trigger.
      </>
    ),
    url: 'https://www.w3.org/ns/prov#wasStartedBy',
    domain: 'activity',
    domainKey: 'prov:activity',
    range: 'entity',
    rangeKey: 'prov:trigger',
    timestamp: true,
  },
  {
    name: 'wasEndedBy',
    documentation: (
      <>
        <strong><i>End</i></strong>
        {' is when an activity is deemed to have been ended by an entity, known as '}
        <strong><i>trigger</i></strong>
        {'. The activity no longer exists after its end. Any usage, generation, or invalidation involving an activity precedes the activity\'s end. An end may refer to a trigger entity that terminated the activity, or to an activity, known as '}
        <strong><i>ender</i></strong>
        , that generated the trigger.
      </>
    ),
    url: 'https://www.w3.org/ns/prov#wasEndedBy',
    domain: 'activity',
    domainKey: 'prov:activity',
    range: 'entity',
    rangeKey: 'prov:trigger',
    timestamp: true,
  },
  {
    name: 'wasInvalidatedBy',
    documentation: (
      <>
        <strong><i>Invalidation</i></strong>
        {' is the start of the destruction, cessation, or expiry of an existing entity by an activity. The entity is no longer available for use (or further invalidation) after invalidation. Any generation or usage of an entity precedes its invalidation.'}
      </>
    ),
    url: 'https://www.w3.org/ns/prov#wasInvalidatedBy',
    domain: 'entity',
    domainKey: 'prov:entity',
    range: 'activity',
    rangeKey: 'prov:activity',
    timestamp: true,
  },
  {
    name: 'wasDerivedFrom',
    documentation: (
      <>
        {'A '}
        <strong><i>derivation</i></strong>
        {' is a transformation of an entity into another, an update of an entity resulting in a new one, or the construction of a new entity based on a pre-existing entity.'}
      </>
    ),
    url: 'https://www.w3.org/ns/prov#wasDerivedFrom',
    domain: 'entity',
    domainKey: 'prov:generatedEntity',
    range: 'entity',
    rangeKey: 'prov:usedEntity',
  },
  {
    name: 'wasAttributedTo',
    documentation: (
      <>
        <strong><i>Attribution</i></strong>
        {' is the ascribing of an entity to an agent.'}
      </>
    ),
    url: 'https://www.w3.org/ns/prov#wasAttributedTo',
    domain: 'entity',
    domainKey: 'prov:entity',
    range: 'agent',
    rangeKey: 'prov:agent',
  },
  {
    name: 'wasAssociatedWith',
    documentation: (
      <>
        {'An activity '}
        <strong><i>association</i></strong>
        {' is an assignment of responsibility to an agent for an activity, indicating that the agent had a role in the activity. It further allows for a plan to be specified, which is the plan intended by the agent to achieve some goals in the context of this activity.'}
      </>
    ),
    url: 'https://www.w3.org/ns/prov#wasAssociatedWith',
    domain: 'activity',
    domainKey: 'prov:activity',
    range: 'agent',
    rangeKey: 'prov:agent',
  },
  {
    name: 'actedOnBehalfOf',
    documentation: (
      <>
        <strong><i>Delegation</i></strong>
        {' is the assignment of authority and responsibility to an agent (by itself or by another agent) to carry out a specific activity as a delegate or representative, while the agent it acts on behalf of retains some responsibility for the outcome of the delegated work.'}
      </>
    ),
    url: 'https://www.w3.org/ns/prov#actedOnBehalfOf',
    domain: 'agent',
    domainKey: 'prov:delegate',
    range: 'agent',
    rangeKey: 'prov:responsible',
  },
  {
    name: 'wasInfluencedBy',
    documentation: (
      <>
        <strong><i>Influence</i></strong>
        {' is the capacity of an entity, activity, or agent to have an effect on the character, development, or behavior of another by means of usage, start, end, generation, invalidation, communication, derivation, attribution, association, or delegation.'}
      </>
    ),
    url: 'https://www.w3.org/ns/prov#wasInfluencedBy',
    domain: 'entity',
    domainKey: 'prov:influencer',
    range: 'agent',
    rangeKey: 'prov:influencee',
  },
  {
    name: 'specializationOf',
    documentation: (
      <>
        {'An entity that is a '}
        <strong><i>specialization</i></strong>
        {' of another shares all aspects of the latter, and additionally presents more specific aspects of the same thing as the latter. In particular, the lifetime of the entity being specialized contains that of any specialization.'}
      </>
    ),
    url: 'https://www.w3.org/ns/prov#specializationOf',
    domain: 'entity',
    domainKey: 'prov:specificEntity',
    range: 'entity',
    rangeKey: 'prov:generalEntity',
  },
  {
    name: 'alternateOf',
    documentation: (
      <>
        {'Two '}
        <strong><i>alternate</i></strong>
        {' entities present aspects of the same thing. These aspects may be the same or different, and the alternate entities may or may not overlap in time.'}
      </>
    ),
    url: 'https://www.w3.org/ns/prov#alternateOf',
    domain: 'entity',
    domainKey: 'prov:alternate1',
    range: 'entity',
    rangeKey: 'prov:alternate2',
  },
  {
    name: 'hadMember',
    documentation: (
      <>
        <strong><i>Membership</i></strong>
        {' is the belonging of an entity to a collection.'}
      </>
    ),
    url: 'https://www.w3.org/ns/prov#hadMember',
    domain: 'entity',
    domainKey: 'prov:collection',
    range: 'entity',
    rangeKey: 'prov:entity',
  },
];

export type NodeVariant = 'activity' | 'agent' | 'entity'

export const NODE_VARIANTS: NodeVariant[] = ['activity', 'agent', 'entity'];

export const tbdIsNodeVariant = (tbd: string): tbd is NodeVariant => (
  NODE_VARIANTS.includes(tbd as NodeVariant)
);

export type Variant = 'bundle' | NodeVariant

export const VARIANTS: Variant[] = ['activity', 'agent', 'entity', 'bundle'];

export const tbdIsVariant = (tbd: string): tbd is Variant => VARIANTS.includes(tbd as Variant);

export type ProvVizShape = 'box' | 'polygon' | 'ellipse' | 'oval' | 'circle'
  | 'egg' | 'triangle' | 'diamond' | 'trapezium' | 'parallelogram' | 'house'
  | 'pentagon' | 'hexagon' | 'septagon' | 'octagon' | 'invtriangle' | 'invtrapezium'
  | 'invhouse' | 'rectangle' | 'square' | 'star' | 'cylinder' | 'note' | 'tab'
  | 'folder' | 'box3d' | 'component' | 'cds'

export const PROVVIZ_SHAPES: ProvVizShape[] = [
  'box', 'polygon', 'ellipse', 'oval', 'circle', 'egg', 'triangle',
  'diamond', 'trapezium', 'parallelogram', 'house', 'pentagon', 'hexagon',
  'septagon', 'octagon', 'invtriangle', 'invtrapezium', 'invhouse', 'rectangle',
  'square', 'star', 'cylinder', 'note', 'tab', 'folder', 'box3d', 'component', 'cds',
];

export const tbdIsProvVizShape = (tbd: string): tbd is ProvVizShape => PROVVIZ_SHAPES
  .includes(tbd as ProvVizShape);

export type PROVAttributeRange = 'DateTime' | 'Color' | 'Boolean' | 'Shape'

export type PROVAttributeDefinition = {
  name: string;
  documentation?: ReactNode;
  url?: string;
  key: string;
  domain: NodeVariant[];
  range: PROVAttributeRange
}

export const ATTRIBUTE_DEFINITIONS: PROVAttributeDefinition[] = [
  {
    name: 'Started At Time',
    key: 'prov:startTime',
    documentation: 'Start is when an activity is deemed to have been started by an entity, known as trigger. The activity did not exist before its start. Any usage, generation, or invalidation involving an activity follows the activity\'s start. A start may refer to a trigger entity that set off the activity, or to an activity, known as starter, that generated the trigger.',
    url: 'https://www.w3.org/TR/prov-o/#startedAtTime',
    domain: ['activity'],
    range: 'DateTime',
  },
  {
    name: 'Ended At Time',
    key: 'prov:endTime',
    documentation: 'End is when an activity is deemed to have been ended by an entity, known as trigger. The activity no longer exists after its end. Any usage, generation, or invalidation involving an activity precedes the activity\'s end. An end may refer to a trigger entity that terminated the activity, or to an activity, known as ender that generated the trigger.',
    url: 'https://www.w3.org/TR/prov-o/#endedAtTime',
    domain: ['activity'],
    range: 'DateTime',
  },
];

export const PROVVIZ_ATTRIBUTE_DEFINITIONS: PROVAttributeDefinition[] = [
  {
    name: 'Override Color',
    key: 'provviz:color',
    domain: ['activity', 'agent', 'entity'],
    range: 'Color',
  },
  {
    name: 'Override Shape',
    key: 'provviz:shape',
    domain: ['activity', 'agent', 'entity'],
    range: 'Shape',
  },
  {
    name: 'Hide',
    key: 'provviz:hide',
    domain: ['activity', 'agent', 'entity'],
    range: 'Boolean',
  },
  {
    name: 'Hide Attributes',
    key: 'provviz:hideAttributes',
    domain: ['activity', 'agent', 'entity'],
    range: 'Boolean',
  },
];

type TypedLiteral = {
  '$': string;
  type: string;
  lang?: string;
}

type LiteralArray = (string | number | boolean | TypedLiteral)[]

export type AttributeValue = string
| number
| boolean
| TypedLiteral
| LiteralArray

type Entity = { [attributeKey: string]: AttributeValue; }

type Agent = Entity

type Activity = {
  'prov:startTime'?: string;
  'prov:endTime'?: string;
} & { [attributeKey: string]: AttributeValue; }

type Generation = {
  'prov:entity': string;
  'prov:activity': string;
  'prov:time'?: string
} & { [attributeKey: string]: AttributeValue; }

type Usage = Generation;

type Communication = {
  'prov:informant': string;
  'prov:informed': string;
} & { [attributeKey: string]: AttributeValue; }

type Start = {
  'prov:activity': string;
  'prov:time'?: string;
  'prov:trigger'?: string;
} & { [attributeKey: string]: AttributeValue; }

type End = Start

type Invalidation = {
  'prov:entity': string;
  'prov:time'?: string;
  'prov:activity'?: string;
} & { [attributeKey: string]: AttributeValue; }

type Derivation = {
  'prov:generatedEntity': string;
  'prov:usedEntity': string;
  'prov:activity'?: string;
  'prov:generation'?: string;
  'prov:usage'?: string;
} & { [attributeKey: string]: AttributeValue; }

type Attribution = {
  'prov:entity': string;
  'prov:agent': string;
} & { [attributeKey: string]: AttributeValue; }

type Association = {
  'prov:activity': string;
  'prov:agent'?: string;
  'prov:plan'?: string;
} & { [attributeKey: string]: AttributeValue; }

type Delegation = {
  'prov:delegate': string;
  'prov:responsible': string;
  'prov:activity'?: string;
  'prov:type'?: string;
} & { [attributeKey: string]: AttributeValue; }

type Influence = {
  'prov:influencer': string;
  'prov:influencee': string;
} & { [attributeKey: string]: AttributeValue; }

type Specialization = {
  'prov:generalEntity': string;
  'prov:specificEntity': string;
} & { [attributeKey: string]: AttributeValue; }

type Alternate = {
  'prov:alternate1': string;
  'prov:alternate2': string;
} & { [attributeKey: string]: AttributeValue; }

type Membership = {
  'prov:collection': string;
  'prov:entity': string;
} & { [attributeKey: string]: AttributeValue; }

export interface PROVJSONBundle {
  prefix?: { [prefixName: string]: string; }
  agent?: { [agentID: string]: { [attributeKey: string]: AttributeValue; } }
  actedOnBehalfOf?: { [relationID: string]: Delegation }
  wasInfluencedBy?: { [relationID: string]: Influence }
  activity?: { [acitivtyID: string]: Activity }
  wasInformedBy?: { [relationID: string]: Communication }
  used?: { [relationID: string]: Usage }
  wasAssociatedWith?: { [relationID: string]: Association }
  entity?: { [entityID: string]: Entity }
  wasGeneratedBy?: { [relationID: string]: Generation }
  wasStartedBy?: { [relationID: string]: Start }
  wasEndedBy?: { [relationID: string]: End }
  wasInvalidatedBy?: { [relationID: string]: Invalidation }
  wasDerivedFrom?: { [relationID: string]: Derivation }
  wasAttributedTo?: { [relationID: string]: Attribution }
  specializationOf?: { [relationID: string]: Specialization }
  alternateOf?: { [relationID: string]: Alternate }
  hadMember?: { [relationID: string]: Membership }
}

export interface PROVJSONDocument extends PROVJSONBundle {
  bundle?: { [bundleID: string]: PROVJSONBundle; }
}

export const validateDocument = (document: PROVJSONDocument): ReactNode[] => {
  const schemaValidation = validatePROVJSONSchema(document);
  if (schemaValidation === true) {
    return [
      ...(['agent', 'entity', 'activity'] as NodeVariant[]).map((variant) => {
        const nodes = queries.node.getAll(variant)(document);
        return RELATIONS.map(({
          name, domain, domainKey, range, rangeKey,
        }) => {
          if (
            domain === variant
            || range === variant
          ) {
            return [
              ...Object.entries(document[name] || {})
                .map(([id, value]) => [
                  (domain === variant && !nodes.includes(value[domainKey]))
                    ? (
                      <>
                        <i>{name}</i>
                        {' relation with ID '}
                        <strong>{`"${id}"`}</strong>
                        {' references undefined '}
                        <i>{variant}</i>
                        {' '}
                        <strong>{`"${value[domainKey]}"`}</strong>
                      </>
                    )
                    : [],
                  (range === variant && !nodes.includes(value[rangeKey]))
                    ? (
                      <>
                        <i>{name}</i>
                        {' relation with ID '}
                        <strong>{`"${id}"`}</strong>
                        {' references undefined '}
                        <i>{variant}</i>
                        {' '}
                        <strong>{`"${value[rangeKey]}"`}</strong>
                      </>
                    )
                    : [],
                ].flat()).flat(),
              ...Object.entries(document.bundle || {})
                .map(([bundleID, bundle]) => Object.entries(bundle[name] || {})
                  .map(([id, value]) => [
                    (domain === variant && !nodes.includes(value[domainKey]))
                      ? (
                        <>
                          {'Bundle '}
                          <strong>{`"${bundleID}"`}</strong>
                          {': '}
                          <i>{name}</i>
                          {' relation with ID '}
                          <strong>{`${id}`}</strong>
                          {' references undefined '}
                          <i>{variant}</i>
                          {' '}
                          <strong>{`"${value[domainKey]}"`}</strong>
                        </>
                      )
                      : [],
                    (range === variant && !nodes.includes(value[rangeKey]))
                      ? (
                        <>
                          {'Bundle '}
                          <strong>{`"${bundleID}"`}</strong>
                          {': '}
                          <i>{name}</i>
                          {' relation with ID '}
                          <strong>{`"${id}"`}</strong>
                          {' references undefined '}
                          <i>{variant}</i>
                          {' '}
                          <strong>{`"${value[rangeKey]}"`}</strong>
                        </>
                      )
                      : [],
                  ].flat())).flat(),
            ].flat();
          }
          return [];
        }).flat();
      }),
    ].flat();
  }

  return schemaValidation.map(({ dataPath, message }) => (
    <>
      <strong>{`${dataPath}: `}</strong>
      {message}
    </>
  ));
};
